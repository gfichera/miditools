#!/usr/local/bin/lua
---------------------------------------------------------------------
--     This Lua5 script is Copyright (c) 2018, Peter J Billam      --
--                       www.pjb.com.au                            --
--  This script is free software; you can redistribute it and/or   --
--         modify it under the same terms as Lua5 itself.          --
---------------------------------------------------------------------
local Version = '1.2  for Lua5'
local VersionDate  = '05feb2018';
local Synopsis = [[
  muscript -midi bwv1007 | midimarkov > t.mid
  midimarkov bwv1007.mid | aplaymidi -
]]

math.randomseed(os.time())
local MIDI = require 'MIDI'

-- local MA   = require 'midi_markov'
-- require 'DataDumper'

------------ rolled in from ~/lua/lib/midi_markov.lua ------------
function warn(...)
    local a = {}
    for k,v in pairs{...} do table.insert(a, tostring(v)) end
    io.stderr:write(table.concat(a),' ') ; io.stderr:flush()
end
function die(...) warn(...);  os.exit(1) end

function prefix (...) return table.concat({...}, " ") end

local NOWORD = 199

local UsingStdinAsAFile = false
function file2millisec(filename)  -- borrowed from midisox_lua
	if filename == '-n' then return {1000,{}} end
	local midi = ""
	if filename == '-' then
		if UsingStdinAsAFile then die("can't read STDIN twice") end
		-- (sys.stdin.fileno(), 'rb') as fh: Should disable txtmode for dos
		UsingStdinAsAFile = true
		return MIDI.midi2ms_score(io.read('*all'))
	end
	if string.find(filename, '^|%s*(.+)') then  -- 4.8
		local command = string.match(filename, '^|%s*(.+)')  -- 4.8
		local err_fn = os.tmpname()
		local pipe = assert(io.popen(command..' 2>'..err_fn, 'r'))
		-- rb if windows
		midi = pipe:read('*all')  --XXX  -- 4.8
		err_fh = assert(io.open(err_fn))
		local err_msg = err_fh:read('*all')  -- 4.8
		err_fh:close()  -- 4.8
		os.remove(err_fn)
		--msg  = pipe.stderr.read()
		pipe:close()  -- 4.8
		--status = pipe:wait()  -- 4.8
		if string.len(err_msg) > 1 then
			die("can't run "..command..": "..err_msg)
		end
		return MIDI.midi2ms_score(midi)
	end
	if string.find(filename, '^[a-z]+:/') then  -- 3.8
		pcall(function() require 'curl' end)
		if not curl then pcall(function() require 'luacurl' end) end
		if not curl then
			die([[you need to install lua-curl or luacurl, e.g.:
  aptitude install liblua5.1-curl0  (or equivalent on non-debian sytems)
or, if that doesn't work:
  luarocks install luacurl
and perhaps (eg: on debian) one of the following:
  aptitude install libcurl4-gnutls-dev
  aptitude install libcurl4-nss-dev
  aptitude install libcurl4-openssl-dev
]])
		end
		local midi = wget(filename)
		return MIDI.midi2ms_score(midi)
	end

	fh = assert(io.open(filename, "rb"))
	local midi = fh:read('*all')
	fh:close()
	return MIDI.midi2ms_score(midi)
end


function new_markov (arg)
	local allwords
	if  type(arg) == 'function' then allwords = arg
	elseif type(arg) == 'table' then
-- print('arg =', arg)
		local i = 0
		allwords = function () ; i = i + 1 ; return arg[i] end
	end
	local input_words = 0
	local found = {0,0,0,0}
-- print('allwords =', allwords)
-- print('allwords() =', allwords())
	local statetab_1 = {}   -- indexed by the current word only
	local statetab_2 = {}   -- indexed by the last two words
	local statetab_3 = {}   -- indexed by the last three words
	local statetab_4 = {}   -- indexed by the last four words
	local function insert (w1, w2, w3, w4, value)
		local list1 = statetab_1[w4]
		if list1 == nil then statetab_1[w4] = {value}
		else              list1[#list1 + 1] = value
		end
		local p2 = prefix(w3, w4)
		local list2 = statetab_2[p2]
		if list2 == nil then statetab_2[p2] = {value}
		else              list2[#list2 + 1] = value
		end
		local p3 = prefix(w2, w3, w4)
		local list3 = statetab_3[p3]
		if list3 == nil then statetab_3[p3] = {value}
		else              list3[#list3 + 1] = value
		end
		local p4 = prefix(w1, w2, w3, w4)
		local list4 = statetab_4[p4]
		if list4 == nil then statetab_4[p4] = {value}
		else              list4[#list4 + 1] = value
		end
	end

	-- build table
	local w1,w2,w3,w4 = NOWORD, NOWORD, NOWORD, NOWORD   -- initialise
	for nextword in allwords do
		insert(w1, w2, w3, w4, nextword)
		w1 = w2 ; w2 = w3 ; w3 = w4 ; w4 = nextword
		input_words = input_words + 1
	end
	insert(w1, w2, w3, w4, NOWORD)

	-- generate text
	w1 = NOWORD ; w2 = NOWORD ; w3 = NOWORD ; w4 = NOWORD  -- reinitialise
	local seeds = {}
	return function (opt, ...)
		if opt == 'stats' then
			local s = "input_words="..tostring(input_words)..",  "
			for i = #found,1,-1 do
				s = s .. "found["..tostring(i).."]="..tostring(found[i]).." "
			end
			return s
		elseif opt == 'seed' then
			seeds = {...}
			for i = 1, #seeds do
				seeds[i] = tostring(seeds[i])
				if statetab_1[seeds[i]] then
					w1 = w2 ; w2 = w3 ; w3 = w4 ; w4 = seeds[i]
				end
			end
			return nil
		end
		if #seeds > 0 then  -- still some seeds left; regurgitate the seed
			local w = table.remove(seeds, 1)
			return w
		end
		local nextword
		local list2 = statetab_2[prefix(w3,w4)]
		local list3 = statetab_3[prefix(w2,w3,w4)]
		local list4 = statetab_4[prefix(w1,w2,w3,w4)]
		if list4 and #list4 > 1 then
			nextword = list4[math.random(#list4)]  -- choose a random word
			found[4] = found[4] + 1
		elseif list3 and #list3 > 1 then
			nextword = list3[math.random(#list3)]  -- choose a random word
			found[3] = found[3] + 1
		elseif list2 and #list2 > 1 then
			nextword = list2[math.random(#list2)]
			found[2] = found[2] + 1
		else
			local list1 = statetab_1[w4]
			if not list1 then return end
			nextword = list1[math.random(#list1)]
			found[1] = found[1] + 1
		end
		-- if nextword ~= NOWORD then io.stdout:write(nextword, " ") end
		-- if it's a NOWORD, we should try the next one ...
		w1 = w2 ; w2 = w3 ; w3 = w4 ; w4 = nextword
		return nextword
	end
end

Arg = {
	channels   = {},
	fixed      = {},
	num_notes  = 400,
	patch      = 82,
	quantise   = 1,
	rhythmfile = '',
	stats      = false,
}

local function round(x) return math.floor(x+0.5) end

local function split(s, pattern, maxNb) -- http://lua-users.org/wiki/SplitJoin
    if not s or string.len(s)<2 then return {s} end
    if not pattern then return {s} end
    if maxNb and maxNb <2 then return {s} end
    local result = { }
    local theStart = 1
    local theSplitStart,theSplitEnd = string.find(s,pattern,theStart)
    local nb = 1
    while theSplitStart do
        table.insert(result, tonumber(string.sub(s,theStart,theSplitStart-1)))
        theStart = theSplitEnd + 1
        theSplitStart,theSplitEnd = string.find(s,pattern,theStart)
        nb = nb + 1
        if maxNb and nb >= maxNb then break end
    end
    table.insert( result, tonumber(string.sub(s,theStart,-1)) )
    return result
end

local function sorted_keys(t, f)
    local a = {}
    for k,v in pairs(t) do a[#a+1] = k end
    table.sort(a, f)
    return  a
end
local function numerically (a,b)
	return (a<b)
end

------------------------------------------------------------------

local iarg=1; while arg[iarg] ~= nil do
	if not string.find(arg[iarg], '^-[a-z]') then break end
	local first_letter = string.sub(arg[iarg],2,2)
	if first_letter == 'v' then
		local n = string.gsub(arg[0],"^.*/","",1)
		print(n.." version "..Version.."  "..VersionDate)
		os.exit(0)
	elseif first_letter == 'c' then
		iarg = iarg+1
		Arg['channels'] = split(arg[iarg], ",")
		-- for i,v in ipairs(split(arg[iarg], ",")) do
		for i,v in ipairs(Arg['channels']) do
			Arg['channels'][i] = tonumber(v)
		end
	elseif first_letter == 'f' then
		iarg = iarg+1
		Arg['fixed'] = split(arg[iarg], ",")
		for i,v in ipairs(Arg['fixed']) do
			Arg['fixed'][i] = tonumber(v)
		end
	elseif first_letter == 'n' then
		iarg = iarg+1
		Arg['num_notes'] = tonumber(arg[iarg])
	elseif first_letter == 'p' then
		iarg = iarg+1
		Arg['patch'] = round(tonumber(arg[iarg]))
	elseif first_letter == 'q' then
		iarg = iarg+1
		Arg['quantise'] = round(tonumber(arg[iarg]))
	elseif first_letter == 'r' then
		iarg = iarg+1
		Arg['rhythmfile'] = arg[iarg]
	elseif first_letter == 'S' then
		Arg['stats'] = true
	else
		local n = string.gsub(arg[0],"^.*/","",1)
		print(n.." version "..Version.."  "..VersionDate.."\n\n"..Synopsis)
		os.exit(0)
	end
	iarg = iarg+1
end
Arg['notefile'] = arg[iarg] or '-'

local notescore = file2millisec(Arg['notefile'])
table.sort(notescore[2], function (e1,e2) return e1[2]<e2[2] end)
-- perhaps keep a separate fixed and non-fixed score ?
local fixedscore = MIDI.grep(notescore, Arg['fixed'])
if #Arg['channels'] > 0 then
	local channels_or_fixed = {}   -- keep the fixed channels anyway
	-- is it appropriate ? but it does make it easier to output the result...
	for i,v in ipairs(Arg['channels']) do channels_or_fixed[v] = true end
	for i,v in ipairs(Arg['fixed'])    do channels_or_fixed[v] = true end
	notescore = MIDI.grep(notescore, sorted_keys(channels_or_fixed))
end
local allpitches = {}
for i,v in ipairs(notescore[2]) do   -- should this be nonfixedscore ?
	if v[1] == 'note' then table.insert(allpitches, v[5]) end
end

local all_dtimes = {}
local previous_t = 0
local rhythmscore = notescore
if Arg['rhythmfile'] ~= '' then
	rhythmscore = file2millisec(Arg['rhythmfile'])
	table.sort(rhythmscore[2], function (e1,e2) return e1[2]<e2[2] end)
end
for i,v in ipairs(rhythmscore[2]) do
	if v[1] == 'note' then
		local duration = v[2]-previous_t
		if Arg['quantise'] > 1 then
			duration = Arg['quantise'] * round(duration/Arg['quantise'])
		end
		table.insert(all_dtimes, duration)
		previous_t = v[2]
	end
end
-- print (DataDumper(all_dtimes)) ; os.exit()

local newpitches = new_markov(allpitches)
local new_dtimes = new_markov(all_dtimes)
-- newpitches('seed',67)
local new_channel = nil -- should be the lowest non_fixed channel, but not 9
local fixed = {}
for i,v in ipairs(Arg['fixed']) do fixed[v] = true end  -- array to dict
for i = 0, 15 do
	if i ~= 9 and not fixed[i] then new_channel = i ; break end
end
if not new_channel then io.stderr:write
	("could not find a new channel that was not a fixed channel\n")
	os.exit()
end
print('new_channel =',new_channel) ; os.exit()

local new_track = {
	{'patch_change',0, new_channel, Arg['patch']},
	{'set_tempo',   0, 1000000}
}
local time = 5
for i = 1, Arg['num_notes'] do
	-- This looks really dumb if -c 4,5 has eliminated all notes in the score
	-- because it generates num_notes of
	--   ['note_on', 0, 1, 0, 98], ['note_off', 0, 1, 0, 98],    ???
	local new_pitch = tonumber(newpitches()) or 0   -- ???
	local new_dtime = round(tonumber(new_dtimes())) or 199   -- ???
	-- if new_dtime == 0 then it's not appropriate for the duration !
	-- then duration should be taken 
	local duration = new_dtime
	if new_dtime == 0 then duration = 199 end
	table.insert(new_track, {'note',time,duration,new_channel,new_pitch,98})
	time = time + new_dtime   -- now increment the time for the next note
end
table.insert(new_track, {'marker', time, 'final_barline'})

--local midifile_name = '/tmp/midimarkov_'..tostring(os.time()%100000)..'.mid'
--local midifile = assert(io.open(midifile_name,'w'))
--midifile:write(MIDI.score2midi({1000, new_track}))
--midifile:close()
--MIDI.play_score({1000, new_track})

-- should merge the new score with a score of the fixed channels ...
local new_score = MIDI.score2midi({1000, new_track})
local fixed_score = MIDI.grep()

io.stdout:write(MIDI.score2midi({1000, new_track}))

if Arg['stats'] then
	io.stderr:write("\n")
	io.stderr:write(new_dtimes('stats')..'\n')
	io.stderr:write(newpitches('stats')..'\n')
end

-- print(DataDumper(new_track))
-- print(MIDI.score_type({1000, new_track}))

os.exit()

--[=[
TO DO

Next: perhaps something similar using I<midialsa.lua> with live midi input,
perhaps letting input-notes through while adding them to the input-array
and remaining silent, and then when the input goes silent, generating
a markov continuation of it - something like an uninterruptable solo.
This needs the ability to add to the array in real-time.

Investigate the effects of iteration:
what does it converge on ?
how do varying output-sizes affect it ?

Introduce I<-R rhythmfile.mid> which does not markov the rhythmfile,
but obeys it literally, and then repeats it if necessary.

If there's nothing in the N=1 list,
or perhaps even if there's only one option in the N=1 list,
then relative pitches are used, eg: -15 -14 -13 ,,, -1 0 +1 +2 +3 .. +15
Relative pitches make no sense for eg a recorder, or a tin whistle,

Could also, following the Biaxial LSTM models and I<DeepJ>,
model each note within each timestep as a probability conditioned
on all previous timesteps
and all notes within the current timestep that have already been generated,
the notes being generated from lowest to highest.
Also, along the time axis, only relative pitches are used.
The calculation of each timestep also feeds in contextual inputs
representing the current beat in the bar.
See I<DeepJ>: https://arxiv.org/abs/1801.00887

This rhythmfile could incorporate metronome-bells (bass cha9 B_b)
to help midichord, but it's going to need more elaboration to
allow the specification of different characteristic rhythms in each voice
(eg: vibraphone solo, jazz guitar chords, and pizz bass).

It would be nice to be able to suggest I<themes>.

It would be nice to be able to specify I<groupings> of notes as markov units,
like I<8. 8. 8. (8 16) 8. 8.>
in fact bar-sized groupings, or quarter-bar, half-bar, double-bar etc,
Melodic I<groupings> look suspiciously like I<themes> ...

When it comes to suggesting different rhythms for different instruments,
it may best be done by generating each instrument successively
(with its own individual rhythm-file),
and tidying up by hand if necessary,
including adding in metronome-bells.
The rhythm-units, perhaps even the melodic units,
could be re-initialised on the barlines.

But if the voices were added one by one,
I<midichord> could be applied at each new voice as it is added.
And when it comes to harmony between voices,
it may best be done by making the current voice conform
(in some I<midichord> sense)
to those previously-generated "fixed" voices.
But lots of eg piano music does not divide into distinct voices,
one above the other.

I think what I'm aiming at is something with more human intervention
than envisaged by I<DeepJ>

First step: use the Fixed Voices like the vertical axis of the 
Biaxial LSTM models and I<DeepJ>.
If that means
"all notes within the current timestep that have already been generated"
then where is the human input into the harmonic language ?
Just in the choice of training material !
I'll need to parse a harmonic input-file,
or impose (a choice of) heuristic sets of rules.
This feels like I<midichord> territory ...
Should I treat down-beats more restrictively than up-beats ?
ie: allow passing-notes ?

The current voice will not always be the highest,
so I need some means of launching it in a particular register.

SO:
1) implement -f fixed-channels,
2) given the choice of each list, choose the NSD one,
   and if there isn't an NSD one, move to the next (shorter) list
3) when there are already four fixed pitches, allow passing-notes like 021

]=]

--[=[

=pod

=head1 NAME

midimarkov - Markov-chain music reconstruction

=head1 SYNOPSIS

  midimarkov t.mid | aplaymidi -
  muscript -midi bach/opfer/ric6_rec | midimarkov > t1.mid
  muscript -midi ~/mus/solosuite/one ~/mus/solosuite/two \
    ~/mus/solosuite/three | midisox_lua - - pitch -300 \
    | midimarkov -p 21 -n 60 -c 1,3,4,7 -r r.mid > t2.mid

  midimarkov t2.mid | midimarkov | midimarkov > t3.mid
  # This iteration increases concentration on a subset of motifs

  muscript -midi ~/mus/bach/bwv1008 | midimarkov -n 800 > t4.mid

  midimarkov -n 400 -p 74 -c 0 samples/folkdance.mid | aplaymidi -

  muscript -midi ~/mus/solosuite/one | midisox_lua - - pitch -1200 \
    | midimarkov -n 60 -r '| midisox r.mid - tempo 1.7' > t5.mid

=head1 DESCRIPTION

I<midimarkov> is a <I>Lua</I> program which uses a
modified Markov Chain algorithm on midi files.

The 'midi file' may also be a pipe
(beginning with a "|" as in I<sox> notation),
as in this example:

  midimarkov -p 31 -n 60 '| muscript -midi ~/mus/solosuite/one'

It produces its midi output on I<stdout>

It uses the I<MIDI.lua> module, which is available from
http://www.luarocks.org

It works best melodically when trained on music in a single line.
When used with the C<-f> option, the harmonic language
defaults to a simple no-semitone-dischords language,
unless it has been trained with the C<-h niceharmonies.mid> option.

=head1 ARGUMENTS

=over 3

=item I<-c 1,3>

Disregards all channels in the input data except for channels 1 and 3

=item I<-f 0,1>

In this example, the midi channels B<0> and B<1> (out of 0...15)
will be treated as the 'fixed' voices,
and the notes on the other channels will be changed
so as not to be discordant with them.
Notes on the fixed-channels are also transmitted unchanged to the output.

This option is similar to its equivalent in I<midichord>,
except that it will work on the other channels not simply by avoiding
semitone dischords, but by a Markov chain of the recent chords.
However, in version 1.2, for prototyping purposes,
it does works simply by avoiding semitone dischords.
See: http://www.pjb.com.au/midi/midichord.html#other_options

=item I<-n 400>

Generate 400 notes of output.  The default is 300.

=item I<-p 40>

The output is given the patch number 40.
The default is 82.

=item I<-q 5>

Quantises the durations of the input-file,
to the nearest 5 milliseconds in this example.
This makes it easier for the output-durations to leap around from
one section of the input to another - which may or may not be desirable.

=item I<-r nicerhythms.mid>

=item I<-r '| midisox nicerhythms.mid - tempo 1.6'>

Uses this separate midi file for the rhythm data.
The 'midi file' may also be a pipe
(beginning with a "|" as in I<sox> notation),
as in the second example.

=item I<-S>

Print on I<stderr> some statistics on the lists in which items were found.

=item I<-v>

Print the Version

=back

=head1 DOWNLOAD

The source is available at
http://www/pjb/com/au/midi/free//midimarkov

The MIDI.lua module, which is available from
http://www.luarocks.org
so you should be able to install it by:

    luarocks install midi

=head1 AUTHOR

Peter J Billam, http://www.pjb.com.au/comp/contact.html

=head1 SEE ALSO

 https://arxiv.org/abs/1801.00887
 http://www.pjb.com.au/comp/lua/MIDI.html#download
 http://www.pjb.com.au/midi/midichord.html
 http://www.pjb.com.au/

=cut

]=]
